breed [vectors vector]
breed [bots bot]

bots-own [

]



; These values will represent the vectors on each patch
patches-own [
  amplitude
  theta
  phi
  free
]


vectors-own [

]

; These vectors are for transferring vector information between agent types
globals [
  amp
  head
  pit
]

; ******************************************************************************************
; ******************************************************************************************

; To get a vector field simulation, you only need to follow the instructions between here
; and the next lines of asterisks


; Give the vector equation in the next three functions, first for the x component, then the
; y component then the z component. Do so in terms of x, y, z, and t (time). By default set to f(x,y,z) = [-x, -y, -z]


; NOTE: ONLY USE WHEN multiple-sections? SWITCHED OFF
to-report x-component
  let x pxcor
  let y pycor
  let z pzcor
  let t ticks


  ; Give the x component of the vector equation here
  report -1 * x
end

to-report y-component
  let x pxcor
  let y pycor
  let z pzcor
  let t ticks

  ; Give the y component of the vector equation here
  report -1 * y
end

to-report z-component
  let x pxcor
  let y pycor
  let z pzcor
  let t ticks

  ; Give the z component of the vector equation here
  report -1 * z
end


; The following three functions are for if you have multiple sections switched on.
; To use, you can add as many elif statements as you like by adding conditions brackets "()"
; before square brackets "[]". The example default provided shows a vector field that follows
; f[x,y,z] = [-x,-y,-z] for x < 0, f[x,y,z] = [1,0,0] for x = 0, and f[x,y,z] = [x, y, z] for x > 0

; NOTE: ONLY USE WHEN multiple-sections? IS SWITCHED ON

to-report x-component-ms
  let x pxcor
  let y pycor
  let z pzcor
  let t ticks

  (ifelse (x > 0)[
    report x
  ](x = 0)[
    report 1
  ][
    report -1 * x;
  ])
end

to-report y-component-ms
  let x pxcor
  let y pycor
  let z pzcor
  let t ticks

  (ifelse (x > 0)[
    report 0
  ](x = 0)[
    report 0
  ][
    report -1 * y;
  ])
end

to-report z-component-ms
  let x pxcor
  let y pycor
  let z pzcor
  let t ticks

  (ifelse (x > 0)[
    report 0
  ](x = 0)[
    report 0
  ][
    report -1 * z;
  ])
end

; The following function is for you to represent free space. Represent regions in the same way you would for the multiple-sections code
; But instead of reporting set the value free to either true (if should be free space) or false (if should not be free space)

to free-space
  let x pxcor
  let y pycor
  let z pzcor

  (ifelse (x < 0)[
    set free true
  ][
    set free false
  ])

end

; Please do not change code below

; ******************************************************************************************
; ******************************************************************************************


to resize
  resize-world minimum-x-coordinate maximum-x-coordinate minimum-y-coordinate maximum-y-coordinate minimum-z-coordinate maximum-z-coordinate
end


; Will prepare the environment, run by the setup button in the interface
to setup
  clear-all
  reset-ticks
  if (static-vectors?)[
    setup-patches
    if (show-vectors?)[
      create-vectors (num-vec-per-dimension * num-vec-per-dimension * num-vec-per-dimension) [vector-setup]
    ]
  ]
  create-bots Microbots [bot-setup]

end

; Will run a single tick (discrete time step) of the simulation.
; Run once with the button "go-once" and continuously by the button "go"
to go
  if (not static-vectors?)[
    ask vectors [ die ]
    clear-drawing
    setup-patches
    if (show-vectors?) [ ; can be turned on and off by flicking the switch of the same name in the interface
      create-vectors (num-vec-per-dimension * num-vec-per-dimension * num-vec-per-dimension) [vector-setup]
    ]
  ]
  move-bots

  tick
end

; Will find the vector information for each patch, ultimately uses the equations given by the
; user near the top of the program
to setup-patches
  ifelse (multiple-sections?)[
    ask patches [
      set amplitude pAmp-ms
      set theta pTheta-ms
      set phi pPhi-ms
      free-space
    ]
  ][
    ask patches [
      set amplitude pAmp
      set theta pTheta
      set phi pPhi
      free-space
    ]
  ]

end

to setup-patches-og
  ask patches [
    if (pzcor = 0)[
      set pcolor red
    ]
  ]
end

; Will move the simulated microbots given the vector (magnetic) field
to move-bots
  ask bots [
    ask patch xcor ycor zcor[
      set amp amplitude
      set head theta
      set pit phi
    ]
    ifelse (about-to-wrap)[
      set heading head
      set pitch pit
    ][
      set heading head
      set pitch pit
      forward amp / 10
    ]
  ]
end


; Will draw the vectors
to vector-setup
  move-to one-of patches with [not any? other vectors-here and (pxcor mod vec-pos-scale-x = 0 and pycor mod vec-pos-scale-y = 0 and pzcor mod vec-pos-scale-z = 0)]
  ask patch xcor ycor zcor [
    set amp amplitude
    set head theta
    set pit phi
  ]
  ifelse (amp = 0)[
    die
  ][
    let reference max [amplitude] of patches
    let const (reference / 250)
    set heading head
    set pitch pit
    set color whatColour const amp
    if (not at-edge)[
      pen-down
      forward 1
    ]
  ]
end

; Creates a relative colour scheme based on the strength of the vectors
to-report whatColour [const ampl]
  let colourVal (ampl / const)
  if (colourVal >= 0) and (colourVal < 50)[
    report yellow
  ]
  if (colourVal >= 50) and (colourVal < 100)[
    report green
  ]
  if (colourVal >= 100) and (colourVal < 150)[
    report blue
  ]
  if (colourVal >= 150) and (colourVal < 200)[
    report magenta
  ]
  if (colourVal >= 200) and (colourVal <= 250)[
    report red
  ]
  report brown
end

; Just randomly places bots on the screen given the Microbots slider in the interface, called by the "setup" button
to bot-setup
  set size (bot-size / 100)
  set color blue
  set shape "square"
  ifelse (Only-Spawn-Free-Space?)[
    move-to one-of patches with [(not any? other bots-here) and free]
  ][
    move-to one-of patches with [not any? other bots-here]
  ]
end


; The following calculates the vectors in the vector (magnetic) field in spherical coordinates
; so that they can be drawn in netlogo. The functions are called by setup-patches, which is called in go
; Note: The starting 'p' is for patch

; finds the amplitude of the vectors at each patch
to-report pAmp
  let x x-component
  let y y-component
  let z z-component

  report sqrt (x * x + y * y + z * z)

end

; Finds the heading of the vectors at each patch
to-report pTheta
  let x x-component
  let y y-component

  ifelse (x = 0 and y = 0)[
    report 0;
  ][
    report atan x y
  ]
end

; Finds the pitch of the vectors at each patch
to-report pPhi
  let x x-component
  let y y-component
  let z z-component
  ifelse (z = 0)[
    report 0
  ][
    report atan z sqrt(x * x + y * y)
  ]
end

; Finds the amplitude of the vectors at each patch (multiple sections)
to-report pAmp-ms
  let x x-component-ms
  let y y-component-ms
  let z z-component-ms

  report sqrt (x * x + y * y + z * z)

end

; Finds the heading of the vectors at each patch (multiple sections)
to-report pTheta-ms
  let x x-component-ms
  let y y-component-ms

  ifelse (x = 0 and y = 0)[
    report 0;
  ][
    report atan x y
  ]
end

; Finds the pitch of the vectors at each patch (multiple sections)
to-report pPhi-ms
  let x x-component-ms
  let y y-component-ms
  let z z-component-ms
  ifelse (z = 0)[
    report 0
  ][
    report atan z sqrt(x * x + y * y)
  ]
end

to-report vec-pos-scale-x
  report (maximum-x-coordinate - minimum-x-coordinate) / num-vec-per-dimension
end

to-report vec-pos-scale-y
  report (maximum-y-coordinate - minimum-y-coordinate) / num-vec-per-dimension
end

to-report vec-pos-scale-z
  report (maximum-z-coordinate - minimum-z-coordinate) / num-vec-per-dimension
end

to-report at-edge
  ifelse ((pxcor = minimum-x-coordinate) or (pxcor = maximum-x-coordinate) or (pycor = minimum-y-coordinate) or (pycor = maximum-y-coordinate) or (pzcor = minimum-z-coordinate) or (pzcor = maximum-z-coordinate))[
    report true
  ][
    report false
  ]
end

to-report about-to-wrap
  ifelse ((at-edge) and (ticks > 0)) [
    report true
  ][
    report false
  ]
end
@#$#@#$#@
GRAPHICS-WINDOW
0
0
437
438
-1
-1
13.0
1
10
1
1
1
0
1
1
1
-16
16
-16
16
-16
16
1
0
1
ticks
30.0

BUTTON
45
33
136
79
NIL
setup\n
NIL
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

BUTTON
154
33
250
79
go-once
go
NIL
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

SLIDER
294
40
466
73
Microbots
Microbots
1
100
100.0
1
1
NIL
HORIZONTAL

SWITCH
248
176
384
209
show-vectors?
show-vectors?
1
1
-1000

BUTTON
153
85
252
131
Resize-World
resize
NIL
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

SLIDER
69
238
287
271
minimum-x-coordinate
minimum-x-coordinate
-50
0
-16.0
1
1
patches
HORIZONTAL

SLIDER
67
279
290
312
maximum-x-coordinate
maximum-x-coordinate
0
50
16.0
1
1
patches
HORIZONTAL

SLIDER
309
239
527
272
minimum-y-coordinate
minimum-y-coordinate
-50
0
-16.0
1
1
patches
HORIZONTAL

SLIDER
309
278
532
311
maximum-y-coordinate
maximum-y-coordinate
0
50
16.0
1
1
patches
HORIZONTAL

SLIDER
555
237
770
270
minimum-z-coordinate
minimum-z-coordinate
-50
0
-16.0
1
1
patches
HORIZONTAL

SLIDER
553
277
774
310
maximum-z-coordinate
maximum-z-coordinate
0
50
16.0
1
1
patches
HORIZONTAL

SLIDER
407
175
579
208
num-vec-per-dimension
num-vec-per-dimension
3
15
8.0
1
1
NIL
HORIZONTAL

TEXTBOX
601
172
751
214
Should share divisors with the difference between each min and max coordinate
11
0.0
1

BUTTON
45
89
139
130
NIL
go
T
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

TEXTBOX
29
166
245
250
Do you want to to see the vectors of the vector field? (Note this will significantly slow down the simulation with non-static if you have static-vectors? switched off)
11
0.0
1

TEXTBOX
486
41
636
69
How many microbots do you want to simulate?
11
0.0
1

SWITCH
47
389
199
422
multiple-sections?
multiple-sections?
0
1
-1000

TEXTBOX
214
386
427
456
Switch on to write different vector-valued functions for different regions of the space. You will need to use different functions.
11
0.0
1

SWITCH
46
448
184
481
static-vectors?
static-vectors?
0
1
-1000

TEXTBOX
214
439
578
551
Switch on if you do not intend to use time (ticks) in your vector valued function. While not essential, will massively speed up the simulation. May speed up to the point where you need to slow down the speed when running go. Please keep speed high when running setup though, as otherwise this can take a while (Can be done in 3D view).
11
0.0
1

SLIDER
293
90
477
123
bot-size
bot-size
5
100
50.0
1
1
% of patch size
HORIZONTAL

TEXTBOX
494
85
664
127
How big do you want the microbots to be (as a percentage of patch size)?
11
0.0
1

TEXTBOX
795
245
945
287
Adjust these to decide the dimensions of your world, then click on \"Resize-World\"
11
0.0
1

SWITCH
718
52
914
85
Only-Spawn-Free-Space?
Only-Spawn-Free-Space?
0
1
-1000

TEXTBOX
931
46
1112
102
Set to \"on\" if you only want microbots to spawn in a space you have defined as \"free\" in the code
11
0.0
1

@#$#@#$#@
## WHAT IS IT?

(a general understanding of what the model is trying to show or explain)

## HOW IT WORKS

(what rules the agents use to create the overall behavior of the model)

## HOW TO USE IT

(how to use the model, including a description of each of the items in the Interface tab)

## THINGS TO NOTICE

(suggested things for the user to notice while running the model)

## THINGS TO TRY

(suggested things for the user to try to do (move sliders, switches, etc.) with the model)

## EXTENDING THE MODEL

(suggested things to add or change in the Code tab to make the model more complicated, detailed, accurate, etc.)

## NETLOGO FEATURES

(interesting or unusual features of NetLogo that the model uses, particularly in the Code tab; or where workarounds were needed for missing features)

## RELATED MODELS

(models in the NetLogo Models Library and elsewhere which are of related interest)

## CREDITS AND REFERENCES

(a reference to the model's URL on the web if it has one, as well as any other necessary credits, citations, and links)
@#$#@#$#@
default
true
0
Polygon -7500403 true true 150 5 40 250 150 205 260 250

airplane
true
0
Polygon -7500403 true true 150 0 135 15 120 60 120 105 15 165 15 195 120 180 135 240 105 270 120 285 150 270 180 285 210 270 165 240 180 180 285 195 285 165 180 105 180 60 165 15

arrow
true
0
Polygon -7500403 true true 150 0 0 150 105 150 105 293 195 293 195 150 300 150

box
false
0
Polygon -7500403 true true 150 285 285 225 285 75 150 135
Polygon -7500403 true true 150 135 15 75 150 15 285 75
Polygon -7500403 true true 15 75 15 225 150 285 150 135
Line -16777216 false 150 285 150 135
Line -16777216 false 150 135 15 75
Line -16777216 false 150 135 285 75

bug
true
0
Circle -7500403 true true 96 182 108
Circle -7500403 true true 110 127 80
Circle -7500403 true true 110 75 80
Line -7500403 true 150 100 80 30
Line -7500403 true 150 100 220 30

butterfly
true
0
Polygon -7500403 true true 150 165 209 199 225 225 225 255 195 270 165 255 150 240
Polygon -7500403 true true 150 165 89 198 75 225 75 255 105 270 135 255 150 240
Polygon -7500403 true true 139 148 100 105 55 90 25 90 10 105 10 135 25 180 40 195 85 194 139 163
Polygon -7500403 true true 162 150 200 105 245 90 275 90 290 105 290 135 275 180 260 195 215 195 162 165
Polygon -16777216 true false 150 255 135 225 120 150 135 120 150 105 165 120 180 150 165 225
Circle -16777216 true false 135 90 30
Line -16777216 false 150 105 195 60
Line -16777216 false 150 105 105 60

car
false
0
Polygon -7500403 true true 300 180 279 164 261 144 240 135 226 132 213 106 203 84 185 63 159 50 135 50 75 60 0 150 0 165 0 225 300 225 300 180
Circle -16777216 true false 180 180 90
Circle -16777216 true false 30 180 90
Polygon -16777216 true false 162 80 132 78 134 135 209 135 194 105 189 96 180 89
Circle -7500403 true true 47 195 58
Circle -7500403 true true 195 195 58

circle
false
0
Circle -7500403 true true 0 0 300

circle 2
false
0
Circle -7500403 true true 0 0 300
Circle -16777216 true false 30 30 240

cow
false
0
Polygon -7500403 true true 200 193 197 249 179 249 177 196 166 187 140 189 93 191 78 179 72 211 49 209 48 181 37 149 25 120 25 89 45 72 103 84 179 75 198 76 252 64 272 81 293 103 285 121 255 121 242 118 224 167
Polygon -7500403 true true 73 210 86 251 62 249 48 208
Polygon -7500403 true true 25 114 16 195 9 204 23 213 25 200 39 123

cylinder
false
0
Circle -7500403 true true 0 0 300

dot
false
0
Circle -7500403 true true 90 90 120

face happy
false
0
Circle -7500403 true true 8 8 285
Circle -16777216 true false 60 75 60
Circle -16777216 true false 180 75 60
Polygon -16777216 true false 150 255 90 239 62 213 47 191 67 179 90 203 109 218 150 225 192 218 210 203 227 181 251 194 236 217 212 240

face neutral
false
0
Circle -7500403 true true 8 7 285
Circle -16777216 true false 60 75 60
Circle -16777216 true false 180 75 60
Rectangle -16777216 true false 60 195 240 225

face sad
false
0
Circle -7500403 true true 8 8 285
Circle -16777216 true false 60 75 60
Circle -16777216 true false 180 75 60
Polygon -16777216 true false 150 168 90 184 62 210 47 232 67 244 90 220 109 205 150 198 192 205 210 220 227 242 251 229 236 206 212 183

fish
false
0
Polygon -1 true false 44 131 21 87 15 86 0 120 15 150 0 180 13 214 20 212 45 166
Polygon -1 true false 135 195 119 235 95 218 76 210 46 204 60 165
Polygon -1 true false 75 45 83 77 71 103 86 114 166 78 135 60
Polygon -7500403 true true 30 136 151 77 226 81 280 119 292 146 292 160 287 170 270 195 195 210 151 212 30 166
Circle -16777216 true false 215 106 30

flag
false
0
Rectangle -7500403 true true 60 15 75 300
Polygon -7500403 true true 90 150 270 90 90 30
Line -7500403 true 75 135 90 135
Line -7500403 true 75 45 90 45

flower
false
0
Polygon -10899396 true false 135 120 165 165 180 210 180 240 150 300 165 300 195 240 195 195 165 135
Circle -7500403 true true 85 132 38
Circle -7500403 true true 130 147 38
Circle -7500403 true true 192 85 38
Circle -7500403 true true 85 40 38
Circle -7500403 true true 177 40 38
Circle -7500403 true true 177 132 38
Circle -7500403 true true 70 85 38
Circle -7500403 true true 130 25 38
Circle -7500403 true true 96 51 108
Circle -16777216 true false 113 68 74
Polygon -10899396 true false 189 233 219 188 249 173 279 188 234 218
Polygon -10899396 true false 180 255 150 210 105 210 75 240 135 240

house
false
0
Rectangle -7500403 true true 45 120 255 285
Rectangle -16777216 true false 120 210 180 285
Polygon -7500403 true true 15 120 150 15 285 120
Line -16777216 false 30 120 270 120

leaf
false
0
Polygon -7500403 true true 150 210 135 195 120 210 60 210 30 195 60 180 60 165 15 135 30 120 15 105 40 104 45 90 60 90 90 105 105 120 120 120 105 60 120 60 135 30 150 15 165 30 180 60 195 60 180 120 195 120 210 105 240 90 255 90 263 104 285 105 270 120 285 135 240 165 240 180 270 195 240 210 180 210 165 195
Polygon -7500403 true true 135 195 135 240 120 255 105 255 105 285 135 285 165 240 165 195

line
true
0
Line -7500403 true 150 0 150 300

line half
true
0
Line -7500403 true 150 0 150 150

pentagon
false
0
Polygon -7500403 true true 150 15 15 120 60 285 240 285 285 120

person
false
0
Circle -7500403 true true 110 5 80
Polygon -7500403 true true 105 90 120 195 90 285 105 300 135 300 150 225 165 300 195 300 210 285 180 195 195 90
Rectangle -7500403 true true 127 79 172 94
Polygon -7500403 true true 195 90 240 150 225 180 165 105
Polygon -7500403 true true 105 90 60 150 75 180 135 105

plant
false
0
Rectangle -7500403 true true 135 90 165 300
Polygon -7500403 true true 135 255 90 210 45 195 75 255 135 285
Polygon -7500403 true true 165 255 210 210 255 195 225 255 165 285
Polygon -7500403 true true 135 180 90 135 45 120 75 180 135 210
Polygon -7500403 true true 165 180 165 210 225 180 255 120 210 135
Polygon -7500403 true true 135 105 90 60 45 45 75 105 135 135
Polygon -7500403 true true 165 105 165 135 225 105 255 45 210 60
Polygon -7500403 true true 135 90 120 45 150 15 180 45 165 90

sheep
false
15
Circle -1 true true 203 65 88
Circle -1 true true 70 65 162
Circle -1 true true 150 105 120
Polygon -7500403 true false 218 120 240 165 255 165 278 120
Circle -7500403 true false 214 72 67
Rectangle -1 true true 164 223 179 298
Polygon -1 true true 45 285 30 285 30 240 15 195 45 210
Circle -1 true true 3 83 150
Rectangle -1 true true 65 221 80 296
Polygon -1 true true 195 285 210 285 210 240 240 210 195 210
Polygon -7500403 true false 276 85 285 105 302 99 294 83
Polygon -7500403 true false 219 85 210 105 193 99 201 83

square
false
0
Rectangle -7500403 true true 30 30 270 270

square 2
false
0
Rectangle -7500403 true true 30 30 270 270
Rectangle -16777216 true false 60 60 240 240

star
false
0
Polygon -7500403 true true 151 1 185 108 298 108 207 175 242 282 151 216 59 282 94 175 3 108 116 108

target
false
0
Circle -7500403 true true 0 0 300
Circle -16777216 true false 30 30 240
Circle -7500403 true true 60 60 180
Circle -16777216 true false 90 90 120
Circle -7500403 true true 120 120 60

tree
false
0
Circle -7500403 true true 118 3 94
Rectangle -6459832 true false 120 195 180 300
Circle -7500403 true true 65 21 108
Circle -7500403 true true 116 41 127
Circle -7500403 true true 45 90 120
Circle -7500403 true true 104 74 152

triangle
false
0
Polygon -7500403 true true 150 30 15 255 285 255

triangle 2
false
0
Polygon -7500403 true true 150 30 15 255 285 255
Polygon -16777216 true false 151 99 225 223 75 224

truck
false
0
Rectangle -7500403 true true 4 45 195 187
Polygon -7500403 true true 296 193 296 150 259 134 244 104 208 104 207 194
Rectangle -1 true false 195 60 195 105
Polygon -16777216 true false 238 112 252 141 219 141 218 112
Circle -16777216 true false 234 174 42
Rectangle -7500403 true true 181 185 214 194
Circle -16777216 true false 144 174 42
Circle -16777216 true false 24 174 42
Circle -7500403 false true 24 174 42
Circle -7500403 false true 144 174 42
Circle -7500403 false true 234 174 42

turtle
true
0
Polygon -10899396 true false 215 204 240 233 246 254 228 266 215 252 193 210
Polygon -10899396 true false 195 90 225 75 245 75 260 89 269 108 261 124 240 105 225 105 210 105
Polygon -10899396 true false 105 90 75 75 55 75 40 89 31 108 39 124 60 105 75 105 90 105
Polygon -10899396 true false 132 85 134 64 107 51 108 17 150 2 192 18 192 52 169 65 172 87
Polygon -10899396 true false 85 204 60 233 54 254 72 266 85 252 107 210
Polygon -7500403 true true 119 75 179 75 209 101 224 135 220 225 175 261 128 261 81 224 74 135 88 99

wheel
false
0
Circle -7500403 true true 3 3 294
Circle -16777216 true false 30 30 240
Line -7500403 true 150 285 150 15
Line -7500403 true 15 150 285 150
Circle -7500403 true true 120 120 60
Line -7500403 true 216 40 79 269
Line -7500403 true 40 84 269 221
Line -7500403 true 40 216 269 79
Line -7500403 true 84 40 221 269

wolf
false
0
Polygon -16777216 true false 253 133 245 131 245 133
Polygon -7500403 true true 2 194 13 197 30 191 38 193 38 205 20 226 20 257 27 265 38 266 40 260 31 253 31 230 60 206 68 198 75 209 66 228 65 243 82 261 84 268 100 267 103 261 77 239 79 231 100 207 98 196 119 201 143 202 160 195 166 210 172 213 173 238 167 251 160 248 154 265 169 264 178 247 186 240 198 260 200 271 217 271 219 262 207 258 195 230 192 198 210 184 227 164 242 144 259 145 284 151 277 141 293 140 299 134 297 127 273 119 270 105
Polygon -7500403 true true -1 195 14 180 36 166 40 153 53 140 82 131 134 133 159 126 188 115 227 108 236 102 238 98 268 86 269 92 281 87 269 103 269 113

x
false
0
Polygon -7500403 true true 270 75 225 30 30 225 75 270
Polygon -7500403 true true 30 75 75 30 270 225 225 270
@#$#@#$#@
NetLogo 3D 6.2.2
@#$#@#$#@
need-to-manually-make-preview-for-this-model
@#$#@#$#@
@#$#@#$#@
@#$#@#$#@
@#$#@#$#@
default
0.0
-0.2 0 0.0 1.0
0.0 1 1.0 0.0
0.2 0 0.0 1.0
link direction
true
0
Line -7500403 true 150 150 90 180
Line -7500403 true 150 150 210 180
@#$#@#$#@
0
@#$#@#$#@
